generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

model Customer {
  id          Int          @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String      @unique
  phone       String?
  password  String
  orders      Order[]      // Customer can have multiple orders
  reservations Reservation[] // Customer can have multiple reservations
}

model Employee {
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String   @unique
  password  String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  orders    Order[]  // Employee (waitstaff) can handle multiple orders
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  price       Float
  category    Category
  imageUrl    String?

  modifiers   Modifier[] // Product can have multiple modifiers
  orders      OrderItem[] // Product can be part of multiple order items

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Modifier {
  id          Int       @id @default(autoincrement())
  name        String
  priceChange Float
  productId   Int

  product     Product   @relation(fields: [productId], references: [id])

  // Junction Table Relation with OrderItem
  orderItems  OrderItemModifier[]
}

model Order {
  id          Int         @id @default(autoincrement())
  customerId  Int?
  tableId     Int
  orderTime   DateTime    @default(now())
  status      OrderStatus
  paymentStatus PaymentStatus
  receiptRequested Boolean @default(false)
  paymentMethod PaymentMethod

  customer    Customer?   @relation(fields: [customerId], references: [id])
  table       Table       @relation(fields: [tableId], references: [id])
  items       OrderItem[] // Order can have multiple items
  payments    Payment[]   // Order can have multiple payments
  kitchenNotes String?
  employee    Employee    @relation(fields: [userId], references: [id])
  userId      Int
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  quantity    Int
  price       Float
  orderId     Int
  productId   Int

  order       Order     @relation(fields: [orderId], references: [id]) // Order this item belongs to
  product     Product   @relation(fields: [productId], references: [id]) // Product ordered
  
  // Many-to-many relation with Modifier through the junction table
  modifiers   OrderItemModifier[]
}

model OrderItemModifier {
  orderItemId Int
  modifierId  Int

  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  modifier    Modifier  @relation(fields: [modifierId], references: [id])

  @@id([orderItemId, modifierId]) // Composite primary key for the junction table
}

model Payment {
  id          Int           @id @default(autoincrement())
  amount      Float
  method      PaymentMethod
  paymentDate DateTime      @default(now())
  orderId     Int

  order       Order         @relation(fields: [orderId], references: [id])
}

model Table {
  id          Int         @id @default(autoincrement())
  number      String
  seats       Int
  isOccupied  Boolean     @default(false)

  orders      Order[]     // Table can have multiple orders
  qrCode      String
  reservations Reservation[] // Table can have multiple reservations
}

model Reservation {
  id              Int              @id @default(autoincrement())
  customerId      Int
  tableId         Int
  reservationTime DateTime
  status          ReservationStatus

  customer        Customer         @relation(fields: [customerId], references: [id])
  table           Table            @relation(fields: [tableId], references: [id])
}

enum Category {
  COFFEE
  TEA
  BEVERAGE
  PASTRY
  BREAKFAST
  SANDWICH
  PANINI
  SALAD
  SOUP
  SNACK
  SPECIALS
  COMBO
  DESSERT
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_PAY
}

enum UserRole {
  ADMIN
  WAITSTAFF
  CHEF
  CASHIER
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
}
